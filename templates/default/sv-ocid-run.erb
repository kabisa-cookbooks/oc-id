#!/bin/bash
################################################################################
# This file is managed by Chef, using the oc-id cookbook.                      #
# Editing this file by hand is highly discouraged!                             #
################################################################################

exec 2>&1

#
# Since unicorn creates a new pid on restart/reload, it needs a little extra
# love to manage with runit. Instead of managing unicorn directly, we simply
# trap signal calls to the service and redirect them to unicorn directly.
#

RUNIT_PID=$$
APPLICATION_PATH=<%= File.join(node['ocid']['path'], 'current') %>
BUNDLE_CMD="sudo -u <%= node['ocid']['user'] %> chruby-exec 1.9 -- bundle exec"
UNICORN_CMD='unicorn'
UNICORN_CONF=<%= File.join(node['ocid']['path'], 'shared', 'unicorn.rb') %>
RAILS_ENV=<%= node['ocid']['environment'] %>
CUR_PID_FILE=<%= File.join(node['ocid']['path'], 'shared', 'pids', 'unicorn.pid') %>
OLD_PID_FILE=$CUR_PID_FILE.oldbin

echo "Runit service restarted (PID: $RUNIT_PID)"

function is_unicorn_alive {
  set +e
  if [ -n $1 ] && kill -0 $1 >/dev/null 2>&1; then
    echo "yes"
  fi
  set -e
}

#
# NOTE that your old master won't quit, unless you tell it to in a custom config
# file. The following snippet will make this work as expected:
#
#   before_fork do |server, worker|
#     old_pid = '/path/to/unicorn.pid.oldbin'
#     if File.exists?(old_pid) && server.pid != old_pid
#       begin
#         Process.kill('QUIT', File.read(old_pid).to_i)
#       rescue Errno::ENOENT, Errno::ESRCH
#         # process no longer exists, ignoring...
#       end
#     end
#   end
#
if [ -e $OLD_PID_FILE ]; then
  OLD_PID=$(cat $OLD_PID_FILE)
  echo "Old master detected (PID: $OLD_PID), sending WINCH and waiting for it to quit"

  kill -WINCH $OLD_PID
  while [ -n "$(is_unicorn_alive $OLD_PID)" ]; do
    sleep 5
  done
fi

if [ -e $CUR_PID_FILE ]; then
  CUR_PID=$(cat $CUR_PID_FILE)
  if [ -n "$(is_unicorn_alive $CUR_PID)" ]; then
    echo "Detected running Unicorn instance (PID: $CUR_PID)"
    RUNNING=true
  fi
fi

function start {
  unset ACTION
  if [ $RUNNING ]; then
    restart
  else
    echo 'Starting new unicorn instance'
    cd $APPLICATION_PATH

    $BUNDLE_CMD $UNICORN_CMD -c $UNICORN_CONF -E $RAILS_ENV -D
    sleep 3
    CUR_PID=$(cat $CUR_PID_FILE)
  fi
}

function stop {
  unset ACTION
  echo 'Initializing graceful shutdown'
  kill -QUIT $CUR_PID

  while [ -n "$(is_unicorn_alive $CUR_PID)" ]; do
    echo '.'
    sleep 2
  done

  echo 'Unicorn stopped, exiting Runit process'
  kill -9 $RUNIT_PID
}

function restart {
  unset ACTION
  echo "Restart request captured, swapping old master (PID: $CUR_PID) for new master with USR2"
  kill -USR2 $CUR_PID

  sleep 2
  echo 'Restarting Runit service to capture new master PID'
  exit
}

function alarm {
  unset ACTION
  echo 'Unicorn process interrupted'
}

trap 'ACTION=stop' STOP TERM KILL
trap 'ACTION=restart' QUIT USR2 INT
trap 'ACTION=alarm' ALRM

[ $RUNNING ] || ACTION=start

if [ $ACTION ]; then
  echo "Performing \"$ACTION\" action and going into sleep mode until new signal captured"
elif [ $RUNNING ]; then
  echo "Going into sleep mode until new signal captured"
fi

if [ $ACTION ] || [ $RUNNING ]; then
  while true; do
    [ "$ACTION" == 'start' ] && start
    [ "$ACTION" == 'stop' ] && stop
    [ "$ACTION" == 'restart' ] && restart
    [ "$ACTION" == 'alarm' ] && alarm
    sleep 2
  done
fi
